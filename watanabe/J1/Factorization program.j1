// Factorization program in a time reversible language Janus
// C. Lutz and H. Derby
// Janus : a time-reversiable language. A letter to Launder.
// 1982.
// p.3

num     ;Number to factor.  Ends up zero
try     ;Attempted factor.  Starts and ends zero
z       ;Temporary.  Starts and ends zero
i       ;Pointer to last factor in factor table.  Starts zero
fact[20];Factor table.  Starts zero. Ends with factors in ascending order

procedure factor							;factor num into table in fact[]
      from  (try=0) & (num>1)
      loop  call nexttry
            from  fact[i]#try				;Divide out all occurrences of this
            loop  i += 1					; factor
                  fact[i] += try
                  z += num/try
                  z : num
                  z -= num*try
            until (numÂ¥try)#0
      until (try*try)>num					;Exit early if possible
	  if num#1 
	  then i+=1								;Put last prime away, if not done
           fact[i] : num					; and zero num
      else  num -= 1
      fi    fact[i] # fact[i-1]
		
	  if    (fact[i-1]*fact[i-1]) < fact[i] ;Zero try
	  then  from  (try*try) > fact[i]
      		loop  uncall nexttry
      		until try=0
	  else  try -= fact[i-1]
	  fi    (fact[i-1]*fact[i-1]) < fact[i]

	  call zeroi							;Zero i

procedure zeroi
      from  fact[i+1] = 0
      loop  i -= 1
      until i = 0
      
procedure nexttry
      try += 2
      if    try=4
      then  try -= 1
      fi    try=3
      
procedure readf								;Load table of factors (to be multiplied by
      read  i								;  uncalling procedure factor)
      from  z=0
      loop  z += 1
            read fact[z]
      until i=z
      z -= i     							;zero z
      call zeroi

